To link the data from the registration form to a database, you'll typically need a server-side technology to handle the form submission and database interaction. Below, I'll outline the steps you need to take and provide an example using Node.js and MongoDB.

1. **Set Up Your Database**: First, you need to have a database to store the registration data. For this example, we'll use MongoDB, a NoSQL database. You'll need to install MongoDB and set up a database and collection to store the registration data.

2. **Create a Server-side Script**: Write a server-side script using Node.js to handle the form submission. This script will receive the form data, connect to the MongoDB database, and insert the data into a collection.

3. **Connect to the Database**: Establish a connection to your MongoDB database using the MongoDB Node.js driver and execute an insert operation to insert the form data into the collection.

Here's an example of how you can achieve this using Node.js and MongoDB:

First, you need to install the necessary packages using npm:

```bash
npm install express mongoose body-parser
```

Now, you can create your server-side script (`server.js`):

```javascript
// Import required modules
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

// Create an Express application
const app = express();

// Middleware to parse request bodies
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Connect to MongoDB database
mongoose.connect('mongodb://localhost:27017/registrationDB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Define a schema for the registration data
const registrationSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String
});

// Create a model based on the schema
const Registration = mongoose.model('Registration', registrationSchema);

// Route to handle form submission
app.post('/register', (req, res) => {
    // Create a new registration document
    const registration = new Registration({
        name: req.body.name,
        email: req.body.email,
        password: req.body.password
    });

    // Save the registration document to the database
    registration.save((err) => {
        if (err) {
            console.error(err);
            res.status(500).send('Error saving registration data');
        } else {
            res.send('Registration successful');
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
});
```

In this example:

- We're using Express.js to create a simple web server.
- Mongoose is used to interact with the MongoDB database.
- The `/register` route handles the form submission.
- Data from the form submission is saved to the MongoDB database.

Finally, modify your HTML form to submit data to this route:

```html
<form id="registrationForm" action="/register" method="post">
    <!-- Your form inputs here -->
    <button type="submit" id="registerButton">Register</button>
</form>
```

Make sure MongoDB is running, and then start your Node.js server by running `node server.js`. Now, when you submit the registration form, the data will be saved to your MongoDB database.